var should  = require('chai').should();
var r       = require('rethinkdb');
var init    = require('./');
var conn;

describe('rethink-init', function() {
  before(function(done) {
    r.connect({
      host: 'localhost',
      port: 28015,
      db: 'test'
    }, function(err, connection) {
      if (err) return done(err);
      conn = connection
      done();
    });
  });
  
  before(function(done) {
    r.tableDrop('test1').run(conn, function(err) {
      done();
    });
  });
  
  before(function(done) {
    r.tableDrop('test2').run(conn, function(err) {
      done();
    });
  });
  
  it('should create tables and indexes using schema', function(done) {
    var schema = {
      test1: {
        indexes: {
          field1: true,
          field2: { multi: true },
          field3: { geo: true },
          field4: { multi: true, geo: true }
        },
        options: {
          shards: 1,
          replicas: 1,
          primaryKey: 'field0',
          durability: 'soft'
        }
      },
      test2: {
        indexes: {
          field1: true,
          field2: { multi: true },
          field3: { geo: true },
          field4: { multi: true, geo: true }
        }
      }
    };
    
    init(schema, r, conn, function(err) {
      should.not.exist(err);
      done();
    });
  });
  
  it('should include index settings', function(done) {
    r.tableList().run(conn, function(err, results) {
      should.not.exist(err);
      results.indexOf('test1').should.be.above(-1);
      r.table('test1').indexStatus('field1').run(conn, function(err, results) {
        should.not.exist(err);
        var index = results[0];
        index.geo.should.be.false;
        index.multi.should.be.false;
        index.ready.should.be.true;
        index.outdated.should.be.false;
        r.table('test1').indexStatus('field2').run(conn, function(err, results) {
          should.not.exist(err);
          var index = results[0];
          index.geo.should.be.false;
          index.multi.should.be.true;
          index.ready.should.be.true;
          index.outdated.should.be.false;
          r.table('test1').indexStatus('field3').run(conn, function(err, results) {
            should.not.exist(err);
            var index = results[0];
            index.geo.should.be.true;
            index.multi.should.be.false;
            index.ready.should.be.true;
            index.outdated.should.be.false;
            r.table('test1').indexStatus('field4').run(conn, function(err, results) {
              should.not.exist(err);
              var index = results[0];
              index.geo.should.be.true;
              index.multi.should.be.true;
              index.ready.should.be.true;
              index.outdated.should.be.false;
              done();
            });
          });
        });
      });
    });
  });
  
  it('should include index settings for every table', function(done) {
    r.tableList().run(conn, function(err, results) {
      should.not.exist(err);
      results.indexOf('test2').should.be.above(-1);
      r.table('test2').indexStatus('field1').run(conn, function(err, results) {
        should.not.exist(err);
        var index = results[0];
        index.geo.should.be.false;
        index.multi.should.be.false;
        index.ready.should.be.true;
        index.outdated.should.be.false;
        r.table('test2').indexStatus('field2').run(conn, function(err, results) {
          should.not.exist(err);
          var index = results[0];
          index.geo.should.be.false;
          index.multi.should.be.true;
          index.ready.should.be.true;
          index.outdated.should.be.false;
          r.table('test2').indexStatus('field3').run(conn, function(err, results) {
            should.not.exist(err);
            var index = results[0];
            index.geo.should.be.true;
            index.multi.should.be.false;
            index.ready.should.be.true;
            index.outdated.should.be.false;
            r.table('test2').indexStatus('field4').run(conn, function(err, results) {
              should.not.exist(err);
              var index = results[0];
              index.geo.should.be.true;
              index.multi.should.be.true;
              index.ready.should.be.true;
              index.outdated.should.be.false;
              done();
            });
          });
        });
      });
    });
  });
  
  it('should update indexes when schema changes', function(done) {
    var schema = {
      test1: {
        indexes: {
          field2: { multi: true },
          field3: { geo: true },
          field4: { multi: false, geo: false },
          field5: true
        }
      }
    };
    
    init(schema, r, conn, function(err) {
      should.not.exist(err);
      done();
    });
  });
  
  it('should include index settings', function(done) {
    r.tableList().run(conn, function(err, results) {
      should.not.exist(err);
      results.indexOf('test1').should.be.above(-1);
      r.table('test1').indexStatus('field1').run(conn, function(err, results) {
        err.msg.should.equal('Index `field1` was not found on table `test.test1`.');
        r.table('test1').indexStatus('field2').run(conn, function(err, results) {
          should.not.exist(err);
          var index = results[0];
          index.geo.should.be.false;
          index.multi.should.be.true;
          index.ready.should.be.true;
          index.outdated.should.be.false;
          r.table('test1').indexStatus('field3').run(conn, function(err, results) {
            should.not.exist(err);
            var index = results[0];
            index.geo.should.be.true;
            index.multi.should.be.false;
            index.ready.should.be.true;
            index.outdated.should.be.false;
            r.table('test1').indexStatus('field4').run(conn, function(err, results) {
              should.not.exist(err);
              var index = results[0];
              index.geo.should.be.false
              index.multi.should.be.false;
              index.ready.should.be.true;
              index.outdated.should.be.false;
              r.table('test1').indexStatus('field5').run(conn, function(err, results) {
                should.not.exist(err);
                done();
              });
            });
          });
        });
      });
    });
  });
  
  it('should not remove unspecified tables', function(done) {
    r.tableList().run(conn, function(err, results) {
      should.not.exist(err);
      results.indexOf('test2').should.be.above(-1);
      done();
    });
  });
  
  it('should pass table options to table', function(done) {
    r.table('test1').config().run(conn, function(err, table) {
      should.not.exist(err);
      table.db.should.equal('test');
      table.name.should.equal('test1');
      table.durability.should.equal('soft');
      table.indexes.should.deep.equal(['field2','field3','field4','field5']);
      table.primary_key.should.equal('field0');
      table.shards.should.have.length(1);
      done();
    });
  });
});